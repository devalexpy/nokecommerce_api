generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_URL")
}

model addresses {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  client_id  String   @db.Uuid
  address    String
  is_default Boolean? @default(false)
  clients    clients  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model admins {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String     @unique @db.VarChar(100)
  password     String     @db.VarChar(20)
  name         String     @db.VarChar(20)
  last_name    String     @db.VarChar(20)
  company_name String
  phone_number String?
  products     products[]
  skus         skus[]
  tags         tags[]
}

model clients {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String      @db.VarChar(20)
  last_name    String      @db.VarChar(20)
  email        String      @unique @db.Text()
  password     String      @db.Text()
  phone_number String
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  addresses    addresses[]
  invoices     invoices[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model invoice_items {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  invoice_id String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int
  invoices   invoices @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model invoices {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  client_id     String          @db.Uuid
  total         Int
  paid          Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  clients       clients         @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice_items invoice_items[] @ignore
}

model products {
  id                 String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sku_id             String          @db.Uuid
  tag_id             String          @db.Uuid
  image              String[]
  name               String
  quantity_available Int
  price              Int
  description        String
  admins             admins          @relation(fields: [sku_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags_variants      tags_variants   @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice_items      invoice_items[] @ignore
}

model skus {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  store_id String @db.Uuid
  admins   admins @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  store_id      String          @db.Uuid
  name          String
  admins        admins          @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags_variants tags_variants[]
}

model tags_variants {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tag_id   String     @db.Uuid
  name     String
  tags     tags       @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products products[]
}
